using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
// Track events through event systems
using UnityEngine.EventSystems;

// Implement pointer interfaces programatically, instead of Scene event triggers
public class PlanetSlot : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler {

	public Transform planetsParent; // Reference to macro skill tree
	public Transform sun; // Reference to parent
	public GameObject planet; // Reference to prefab planet
	private bool mouseHover; // Tracks if mouse is hovering over panel

	// Following code is generated by right clicking IPointerEnter/ExitHandler, and selecting "Refactor"
	public void OnPointerEnter (PointerEventData eventData) {
		mouseHover = true;
	}
	public void OnPointerExit (PointerEventData eventData) {
		mouseHover = false;
	}

	void Update () {
		// When player clicks outside the panel
		if (this.GetComponent<Button>().interactable && Input.GetMouseButtonUp (0) && mouseHover) {
			// Deactivate the panel
			createPlanet ();
		}
	}

	// Button On-Click Event
	public void createPlanet () {
		// Instantiate a new planet
		GameObject go = Instantiate (planet) as GameObject;
		// Make planet a child object of the Sun
		go.transform.parent = sun.transform;

		// Generate a random orbit path
		Orbit om = go.GetComponent<Orbit>();
		om.enabled = true;
		om.orbitPath.xAxis = Random.Range(1.0f,10.0f);
		om.orbitPath.yAxis = Random.Range(2.0f,11.0f);
		om.orbitPeriod = Random.Range(6.0f,20.0f);
		float scale = Random.Range(1.0f, 2.0f); 
		om.transform.localScale = new Vector3 (scale, scale, scale);

		// Set all planet slot buttons as uninteractable
		var buttons = planetsParent.GetComponentsInChildren<Button>();
		for (int i = 0; i < buttons.Length; i++) {
			if (buttons [i].interactable) {
				buttons [i].interactable = false;
			}
		}
	}
}
