using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
// Track events through event systems
using UnityEngine.EventSystems;

// Implement pointer interfaces programatically, instead of Scene event triggers
public class PlanetSlot : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler {

	public Transform planetsParent; // Reference to macro skill tree
	public Transform sun; // Reference to parent
	public GameObject planet; // Reference to prefab planet
	private bool mouseHover; // Tracks if mouse is hovering over panel
	private GameObject go;
	private Vector3 mouseLocation;
	private Orbit om;
	private bool planetPlaced = false;

	// Following code is generated by right clicking IPointerEnter/ExitHandler, and selecting "Refactor"
	public void OnPointerEnter (PointerEventData eventData) {
		mouseHover = true;
	}
	public void OnPointerExit (PointerEventData eventData) {
		mouseHover = false;
	}

	void Update () {
		// When player clicks outside the panel
		if (go == null && Input.GetMouseButtonUp (0) && this.GetComponent<Button>().interactable && mouseHover) {
			// Deactivate the panel
			go = Instantiate (planet) as GameObject;
			// Make planet a child object of the Sun
			go.transform.parent = sun.transform;
			// Disable orbit path
			om = go.GetComponent<Orbit>();
			om.enabled = false;

			// Set all planet slot buttons as uninteractable
			var buttons = planetsParent.GetComponentsInChildren<Button> ();
			for (int i = 0; i < buttons.Length; i++) {
				if (buttons [i].interactable) {
					buttons [i].interactable = false;
				}
			}
		}

		// Move planet with mouse
		if (go != null && !planetPlaced) {

			Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);

			// Place Planet
			if (Input.GetMouseButtonDown (0)) {
				RaycastHit hit = new RaycastHit ();
				if (Physics.Raycast (ray, out hit)) {
					if (hit.collider.gameObject.name == "Orbit Plane") {
						if (Input.GetMouseButtonUp (0)) {
							// Set flag last
							planetPlaced = true;
						}
					}
				}
			}
				
			Plane hPlane = new Plane (Vector3.up, Vector3.zero);
			float distance = 0; 
			if (hPlane.Raycast (ray, out distance)) {
				Vector3 location = ray.GetPoint(distance);
				go.transform.position = location;

				// Simulate orbit path
				om.enabled = true;
				om.orbitPath.xAxis = location.x;
				om.orbitPath.yAxis = location.z;

				// LMFAO
				// om.orbitPeriod = -1 * (Mathf.Abs (location.x) + Mathf.Abs (location.z));

				om.orbitPeriod = (Mathf.Abs (location.x) + Mathf.Abs (location.z));

				Debug.Log (om.orbitPeriod);
				float scale = 1.0f; 
				om.transform.localScale = new Vector3 (scale, scale, scale);
			}
		}
	}

	// Button On-Click Event
	public void createPlanet () {
		// Instantiate a new planet



		// On mouse up
		/*
		if (Input.GetMouseButtonDown (0)) {
			Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
			// create a horizontal logic plane at 0,0,0 whose normal points to +Y:
			Plane hPlane = new Plane(Vector3.up, Vector3.zero);
			// Plane.Raycast stores the distance from ray.origin to the hit point in this variable:
			float distance = 0; 
			// if the ray hits the logic plane...
			if (hPlane.Raycast (ray, out distance)) {
				// if the ray hits the physical orbit plane
				RaycastHit hit = new RaycastHit ();
				if (Physics.Raycast (ray, out hit)) {
					if (hit.collider.gameObject.name == "Orbit Plane") {

						// Get the hit point
						Vector3 location = ray.GetPoint(distance);

						// Create Planet
						go.transform.localScale*=1;
						go.transform.position = location;

						// Set all planet slot buttons as uninteractable
						var buttons = planetsParent.GetComponentsInChildren<Button>();
						for (int i = 0; i < buttons.Length; i++) {
							if (buttons [i].interactable) {
								buttons [i].interactable = false;
							}
						}
					}
				}
			}

		}*/

		/*
		// Generate a random orbit path
		Orbit om = go.GetComponent<Orbit>();
		om.enabled = true;
		om.orbitPath.xAxis = Random.Range(1.0f,10.0f);
		om.orbitPath.yAxis = Random.Range(2.0f,11.0f);
		om.orbitPeriod = Random.Range(6.0f,20.0f);
		float scale = Random.Range(1.0f, 2.0f); 
		om.transform.localScale = new Vector3 (scale, scale, scale);
		*/
	}
}
